[project]
dependencies = [
  "aioboto3",
  "aiohttp[speedups]",
  "aiosmtplib",
  "alembic",
  "argon2-cffi",
  "arrow",
  "beautifulsoup4[charset-normalizer,lxml]",
  "bleach",
  "brotli",
  "certifi",
  "cython",
  "dnspython",
  "email-validator",
  "fastapi",
  "feedgen",
  "jinja2",
  "lrucache-rs",
  "lxml",
  "markdown-it-py[plugins]",
  "msgspec",
  "numpy",
  "opencv-python-headless",
  "osm-shortlink",
  "phonenumbers",
  "protobuf==5.28.2",
  "pycryptodomex",
  "pydantic",
  "pyinstrument",
  "python-dateutil",
  "python-magic",
  "python-multipart",
  "pytz",
  "pyyaml",
  "redis[hiredis]",
  "rfc3986",
  "rtree",
  "scikit-learn",
  "setuptools",
  "shapely",
  "sizestr",
  "sqlalchemy[postgresql-asyncpg]",
  "starlette-compress",
  "supervisor",
  "tqdm",
  "uvicorn[standard]",
  "uvloop",
  "yarnlock",
  "zid",
  "zstandard",
]
name = "openstreetmap-ng"
requires-python = "~=3.12"
version = "0.0.0"

[tool.uv]
dev-dependencies = [
  "authlib",
  "cairosvg",
  "click",
  "coverage",
  "httpx",
  "lxml-stubs",
  "polars[numpy]",
  "pre-commit",
  "pytest",
  "pytest-asyncio",
  "types-aioboto3[s3]",
  "types-protobuf",
]
package = false
python-downloads = "never"
python-preference = "only-system"

[tool.setuptools]
packages = ["app", "scripts", "tests", "typings"]

[tool.ruff]
# exclude a variety of commonly ignored directories.
exclude = [
  ".direnv",
  ".git",
  ".github",
  ".pytest_cache",
  ".ruff_cache",
  ".sass-cache",
  ".venv",
  ".vscode",
  "app/alembic/versions",
  "app/models/*_pb2.py",
  "build",
  "dist",
  "node_modules",
]

indent-width = 4
line-length = 120
target-version = "py312"

[tool.ruff.lint]
# custom + https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
ignore = [
  "ARG001",  # unused-function-argument
  "ARG002",  # unused-method-argument
  "B017",    # assert-raises-exception
  "COM812",  # missing-trailing-comma
  "COM819",  # prohibited-trailing-comma
  "D206",    # indent-with-spaces
  "D300",    # triple-single-quotes
  "E111",    # indentation-with-invalid-multiple
  "E114",    # indentation-with-invalid-multiple-comment
  "E117",    # over-indented
  "E501",    # line-too-long
  "ISC001",  # single-line-implicit-string-concatenation
  "ISC002",  # multi-line-implicit-string-concatenation
  "PLR09",   # too-many-*
  "PLR1702", # too-many-nested-blocks
  "PLR2",
  "PLW0603", # global-statement
  "PLW2901", # redefined-loop-name
  "PT011",   # pytest-raises-too-broad
  "Q000",    # bad-quotes-inline-string
  "Q001",    # bad-quotes-multiline-string
  "Q002",    # bad-quotes-docstring
  "Q003",    # avoidable-escaped-quote
  "S101",    # assert
  "SIM108",  # if-else-block-instead-of-if-exp
  "TRY003",  # raise-vanilla-args
  "W191",    # tab-indentation
]
# see https://docs.astral.sh/ruff/rules/ for rules documentation
select = [
  "A",     # flake8-builtins
  "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "C4",    # flake8-comprehensions
  "DTZ",   # flake8-datetimez
  "E4",    # pycodestyle
  "E7",
  "E9",
  "F",     # pyflakes
  "FA",    # flake8-future-annotations
  # "FAST",  # fastapi
  "FLY",  # flynt
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "NPY",  # numpy
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PLC",  # pylint
  "PLE",  # pylint
  "PLR",  # pylint
  "PLW",  # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "PYI",  # flake8-pyi
  "Q",    # flake8-quotes
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T10",  # flake8-debugger
  "TID",  # flake8-tidy-imports
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W6",
  "YTT",  # flake8-2020
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
indent-style = "space"
line-ending = "lf"
quote-style = "single"
skip-magic-trailing-comma = false

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["dir", "format", "id", "input", "open", "type"]

[tool.ruff.lint.flake8-gettext]
extend-function-names = ["npgettext", "pgettext"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["ET"]

[tool.ruff.lint.pylint]
max-args = 10

[tool.pyright]
disableBytesTypePromotions = true
exclude = [
  "**/.*",
  "**/__pycache__",
  "/nix/store/**",
  "app/alembic/versions",
  "app/models/*_pb2.py",
  "node_modules",
]
include = ["app", "scripts", "tests"]
pythonPlatform = "All"
pythonVersion = "3.12"
reportCallInDefaultInitializer = "error"
reportDeprecated = "warning"
reportImplicitOverride = "warning"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "information"
reportMatchNotExhaustive = "error"
reportMissingModuleSource = "none"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "warning"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryCast = "information"
reportUnnecessaryComparison = "information"
reportUnnecessaryContains = "information"
reportUnnecessaryIsInstance = "information"
reportUnnecessaryTypeIgnoreComment = "information"
reportUntypedBaseClass = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedFunctionDecorator = "information"
reportUntypedNamedTuple = "warning"
strictListInference = true
strictSetInference = true
useLibraryCodeForTypes = false

[tool.pytest.ini_options]
addopts = "--quiet"
asyncio_default_fixture_loop_scope = "session"
asyncio_mode = "auto"
minversion = "6.0"
testpaths = ["tests"]

[tool.coverage.run]
source = ["app"]
